version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  aws-ecr: circleci/aws-ecr@7.2.0
  kubernetes: circleci/kubernetes@0.4.0

jobs:
  build-push-docker-image:
    docker:
      - image: circleci/python:3.6.4
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 && \
            sudo chmod +x /bin/hadolint
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint
      - run:
          name: Push Docker Image to Docker Hub
          command: |
            export TAG=v${CIRCLE_BUILD_NUM}
            export IMAGE_NAME=capstone
            docker build -t ahmedo42/$IMAGE_NAME:$TAG .
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD 
            docker push ahmedo42/$IMAGE_NAME:$TAG


  deploy-infra:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      docker-image-name:
        description: |
          Name of the docker image to be deployed
        type: string
      version-info:
        description: |
          App version information
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: "us-east-1"
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/create-or-update-resource:
          resource-file-path: "parameters/params.yml"
          get-rollout-status: true
          resource-name: deployment/capstone
      - kubernetes/create-or-update-resource:
          resource-file-path: "parameters/params.yml"

  test-application:
      executor: aws-eks/python3
      parameters:
        cluster-name:
          description: |
            Name of the EKS cluster
          type: string
        aws-region:
          description: |
            AWS region
          type: string
          default: ""
        expected-version-info:
          description: |
            Expected app version (this is used for testing that the
            correct version has been deployed)
          type: string
      steps:
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: << parameters.cluster-name >>
            install-kubectl: true
            aws-region: << parameters.aws-region >>
        - run:
            name: Wait for service to be ready
            command: |
              kubectl get pods
              kubectl get services
            
  destroy-infra:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: ""
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: << parameters.aws-region >>
      - kubernetes/delete-resource:
          resource-types: "deployment,service"
          label-selector: "app=capstone"
          wait: true
      - run:
          name: Check on pod status
          command: |
            kubectl get pods
workflows:
  default:
    jobs:
      - build-push-docker-image

      - aws-ecr/build-and-push-image:
          name: build-and-push-image-ecr
          account-url: AWS_ECR_URL
          region: AWS_DEFAULT_REGION
          repo: capstone-project
          dockerfile: project/Dockerfile
          path: project/
          tag: ${CIRCLE_SHA1}
          requires: [build-push-docker-image]

      - aws-eks/create-cluster:
          cluster-name: capstone-project-${CIRCLE_WORKFLOW_ID}
          aws-region: $AWS_DEFAULT_REGION
          requires: [build-and-push-image-ecr]

      - deploy-infra:
          cluster-name: capstone-project-${CIRCLE_WORKFLOW_ID}
          aws-region: $AWS_DEFAULT_REGION
          docker-image-name: "${AWS_ECR_URL}/capstone-project:${CIRCLE_SHA1}"
          version-info: "${CIRCLE_SHA1}"
          requires: [aws-eks/create-cluster]

      - test-application:
          cluster-name: capstone-project-${CIRCLE_WORKFLOW_ID}
          aws-region: $AWS_DEFAULT_REGION
          expected-version-info: "${CIRCLE_SHA1}"
          requires: [deploy-infra]

      - destroy-infra:
          cluster-name: capstone-project-${CIRCLE_WORKFLOW_ID}
          aws-region: $AWS_DEFAULT_REGION
          requires: [test-application]

      - aws-eks/delete-cluster:
          cluster-name: capstone-project-${CIRCLE_WORKFLOW_ID}
          aws-region: $AWS_DEFAULT_REGION
          wait: true
          requires: [destroy-infra]